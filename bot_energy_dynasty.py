from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import pandas as pd
import os
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

TOKEN = "7994739525:AAGJWzvn-oLVUOWheeh4RPbf_-mk4PD6zqQ"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

FILE_NAME = "orders.xlsx"
if not os.path.exists(FILE_NAME):
    df = pd.DataFrame(columns=["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ê–¥—Ä–µ—Å", "–û–ø–∏—Å–∞–Ω–∏–µ"])
    df.to_excel(FILE_NAME, index=False)

class OrderState(StatesGroup):
    name = State()
    phone = State()
    address = State()
    description = State()

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ *ENERGY DYNASTY* ‚ö°\n"
        "–ú—ã –≤—ã–ø–æ–ª–Ω—è–µ–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä –∏ –¥–æ–º–æ–≤.\n\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É: /order",
        parse_mode="Markdown"
    )

@dp.message_handler(commands=["order"])
async def order_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
    await OrderState.name.set()

@dp.message_handler(state=OrderState.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû:")
    await OrderState.next()

@dp.message_handler(state=OrderState.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å üè†:")
    await OrderState.next()

@dp.message_handler(state=OrderState.address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å ‚öôÔ∏è:")
    await OrderState.next()

@dp.message_handler(state=OrderState.description)
async def process_description(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_data["description"] = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    df = pd.read_excel(FILE_NAME)
    df = pd.concat([df, pd.DataFrame([user_data])], ignore_index=True)
    df.to_excel(FILE_NAME, index=False)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
